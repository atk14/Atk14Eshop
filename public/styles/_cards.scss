// card deck margin for smaller displays or denser layouts
$card-deck-margin-sm: divide($card-deck-margin, 2);

//card border style
$card-border-style: 1px dashed $border-color;

// utility for setting widths in card-decks
// $card-width: in % (will be adjusted for margins etc. automatically). If zero, then card widths are not set at all.
// $margin: card margin (typically global $card-deck-margin)
@mixin card-deck-sizing( $card-width:0, $margin: $card-deck-margin ) {
	//outline: 1px dotted orangered;
	margin-left: 0 - $margin;
	margin-right: 0 - $margin;
	@if $card-width!=0 {
		.card {
			//outline: 1px dotted red;
			flex-basis: calc(#{$card-width} - #{$margin} * 2);
			max-width: calc(#{$card-width} - #{$margin} * 2);
			margin-left: $margin;
			margin-right: $margin;
			margin-bottom: $margin * 2;
		}
	}
}


.card {
	
	border: none;
	border: $card-border-style;
	@if $card-deck-margin==0 {
		border-left: none;
		border-top: none;
	}
	
	position: relative;
	
	// override height attribute
	// use .card__image in case you need wrapper around image
	.card-img-top, .card-img-bottom, .card__image {
		height: auto;
	}
	.card__image {
		position: relative;
	}
	
	// If image is logo it should be wraped in .card__logo to have nice padding;
	// Padding is added by inline styles
	.card__logo {
		position: relative;
		padding-top: 100%;
		background-color: white;
		&__wrap {
			position: absolute;
			left: 0;
			top: 0;
			width: 100%;
			height: 100%;
			display: flex;
			justify-content: center;
			align-items: center;
		}
	}
	
	.card-title {
		font-size: 1rem;
		flex-grow: 8;
		display: block;
	}
	
	.card-body {

		line-height: 1.25;
		.card-text {
			*:last-child {
				margin-bottom: 0;
			}
		}
	}
	
	.card-body--article {
		display: flex;
		flex-direction: column;
	}
	
	.card-author {
		display: inline-block;
		width: auto;
		padding: 0.25em 0.5em;
		background-color: $body-bg;
		margin-bottom: 1rem;
		font-weight: 600;
		font-size: 0.875rem;
		color: black;
	}
	
	.card-meta {
		margin-top: 1rem;
		font-size: 0.75rem;
	}
	
	.card-footer {
		background-color: transparent;
		border-top: none;
		display: flex;
		justify-content: space-between;
		align-items: end;
		flex-wrap: wrap;
		padding-top: 0;
		line-height: 1.1;
		color: $body-color;
		.btn {
			margin-top: 0.5rem;
		}
		.btn:first-child:last-child {
			margin-top: 0;
		}
		&__stockcount {
			font-size: $font-size-sm;
			color: $body-color;
			line-height: 1;
		}
		& > .card-footer__icon {
			position: relative;
			top: -0.2em;
			color: $brand;
			align-self: flex-end;
			a {
				color: inherit;
				&:hover {
					text-decoration: none;
					color: $link-color;
				}
			}
		}
		.btn > .card-footer__icon:first-child {
			margin-right: 0.25em;
		}
	}
	
	.card__tags {
		position: absolute;
		left: $grid-gutter-width/4;
		top: $grid-gutter-width/4;
		max-width: calc(100% - 100px);
		.tag-item {
			margin-bottom: 0.25rem;
		}
	}
	
	.card__flags {
		position: absolute;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		padding: $grid-gutter-width/2;
		display: flex;
		flex-direction: column;
		justify-content: flex-start;
		align-items: flex-end;
	}

	.card__icons {
		// to be placed inside .card__image
		position: absolute;
		right: 0;
		bottom: 0;
		display: block;
		padding: 0.35em 0.5em;
	}
	
	.card__label {
		// to be placed inside .card__image
		position: absolute;
		left: 0;
		bottom: 0;
		display: inline-block;
		padding: 0.35em 0.5em;
		font-weight: 600;
		line-height: 1;
		color: white;
		background-color: rgba($secondary,0.8);
		font-size: $font-size-sm;
		
	}

	&--in-basket {
		.card__icons {
			&::before {
				@extend .card-icon;
				content: "\f07a";
				background-color: $success !important;
				/*position: absolute;
				left: .35em;
				bottom: .5em;*/
				font-family: $fa-font-family;
				font-weight: 700;
			}
		}
	}
	
	&--horizontal {
		display: grid;
		grid-template-columns: 200px 1fr;
		grid-template-rows: 1fr auto;
		grid-template-areas: "card-image card-body"
												"card-image card-footer";
		.card-img-top, .card__image {
			// use .card__image in case you need wrapper around image
			grid-area: card-image;
		}
		.card-body {
			grid-area: card-body;
			align-self: stretch;
		}
		.card-footer {
			grid-area: card-footer;
			align-self: end;
		}
		&.card--compact {
			grid-template-columns: 150px 1fr;
			.card-author {
				font-size: 0.75rem;
			}
		}
		
		@include media-breakpoint-only(md){
			grid-template-columns: 130px 1fr;
		}
		@include media-breakpoint-only(xs){
			grid-template-columns: 30% 1fr;
		}
		
	}
	
	&--compact:not(.card--horizontal) {
		.card-body {
			padding: $grid-gutter-width/8 $grid-gutter-width/4;
			font-size:  $font-size-sm;
			line-height: 1.25;
			.card-title {
				font-size: inherit;
				line-height: inherit;
				margin-bottom: 0;
			}
		}
		.card-footer {
			padding: $grid-gutter-width/8 $grid-gutter-width/4;
		}
	}

	&--sm {
		.card__flags {
			right: $grid-gutter-width/4;
			top: $grid-gutter-width/4;
		}
		.card-body {
			padding: $grid-gutter-width/4;
		}
		.card-footer {
			padding-left: $grid-gutter-width/4;
			padding-right: $grid-gutter-width/4;
			padding-bottom: $grid-gutter-width/4;
			.card-price {
				font-size: $font-size-sm;
			}
			.card-footer__icon {
				font-size: 0.875rem;
				top: -0.075em;
			}
		}
	}
	
	&--micro {
		//outline: 1px solid red;
		border-left: none;
		border-bottom: none;
		border-top: none;
		flex-basis: 100px;
		max-width: 100px;
		min-width: 100px;
		.card-body {
			font-size: 0.75em;//$font-size-sm;
			padding: $grid-gutter-width/8;
			.card-title {
				font-size: inherit;
				font-weight: normal;
				margin-bottom: 0;
			}
		}
		@include media-breakpoint-down(xs){
			border-right: $card-border-style !important;
		}
		
		&.card--link-more {
			border-right: none;
			justify-content: center;
			.card-body {
				flex-grow: 0;
				font-weight: bold;
				color: $link-color;
			}
		}
		
	}

	// Search results
	&--search {
		border: $card-border-style !important;
		&:not(.card--search--creator) {
			.card-deck > & {
				order: 10;
			}
		}
		.card__flags {
			pointer-events: none;
		}
		&--creator {
			//order: 0;
			flex-basis: calc(50% - #{$card-deck-margin * 2}) !important;
			//max-width: calc(50% - #{$card-deck-margin * 2})  !important;
			.card-deck > & {
				order: 0;
				flex-basis: calc(50% - #{$card-deck-margin * 2}) !important;
				max-width: calc(50% - #{$card-deck-margin * 2})  !important;
			}
			grid-column: span 2;
			display: flex;
			flex-direction: row;
			justify-content: flex-start;
			align-items: stretch;
			& > .creator_profile {
				@extend .card;
				flex-basis: calc(50% - #{$card-deck-margin}) !important;
				max-width: calc(50% - #{$card-deck-margin}) !important;
				flex-shrink: 0;
				border: none !important;
			}
			& > .creator_works {
				flex-basis: 50%;
				flex-shrink: 0;
				flex-grow: 2;
				padding: $card-spacer-x;
				.card--micro {
					max-width: 90px;
					min-width: 90px;
					flex-basis: percenage(1/3);
				}
			}
		}
	}

}

// When displaying lists as card decks, groups or columns 
// we need to unstyle list styling and restyle as .card-*
ul.card-deck, ol.card-deck {
	@extend .list-unstyled;
	@extend .card-deck;
}
ul.card-group, ol.card-group {
	@extend .list-unstyled;
	@extend .card-group;
}
ul.card-column, ol.card-column {
	@extend .list-unstyled;
	@extend .card-column;
}

// Whole card as a single ling
a.card, .card--hoverable {
	transition: all 0.5s;
	.card-body {
		color: $body-color;
	}
	&:hover {
		transition: all 0.1s;
		text-decoration: none;
		background-color: $gray-100;
		
	}
}
a.card {
	&:hover {
		.card-title {
			color: $link-color;
		}
	}
}


.card-grid {
	@include media-breakpoint-up(sm){
		display: grid;
	}
	
	&--cols-4 {
		// flex for IE
		& > .card {
			flex-basis: 100%;
			flex-grow: 0;
			flex-shrink: 0;
		}
		
		@include media-breakpoint-up(sm) {
			//grid-gap: $card-deck-margin * 2;
			grid-auto-flow: dense;
			margin-left: 0 - $card-deck-margin;
			margin-right:0 - $card-deck-margin;
			& > .card {
				margin: $card-deck-margin;
			}
		}
		@include media-breakpoint-between(sm,md) {
			grid-template-columns: 1fr 1fr;
			& > .card {
				flex-basis: 50%;
			}
		}
		@include media-breakpoint-only(lg) {
			grid-template-columns: 1fr 1fr 1fr;
			& > .card {
				flex-basis: percentage(1/3);
			}
		}
		@include media-breakpoint-up(xl) {
			grid-template-columns: 1fr 1fr 1fr 1fr;
			& > .card {
				flex-basis: 25%;
			}
		}
	}

	&--cols-5 {
		// flex for IE
		& > .card {
			flex-basis: 100%;
			flex-grow: 0;
			flex-shrink: 0;
		}
		@include media-breakpoint-up(sm) {
			//grid-gap: $card-deck-margin * 2;
			grid-auto-flow: dense;
			margin-left: 0 - $card-deck-margin;
			margin-right:0 - $card-deck-margin;
			& > .card {
				margin: $card-deck-margin;
			}
		}
		@include media-breakpoint-only(sm) {
			grid-template-columns: 1fr 1fr;
			& > .card {
				flex-basis: 50%;
			}
		}
		@include media-breakpoint-only(md) {
			grid-template-columns: 1fr 1fr 1fr;
			& > .card {
				flex-basis: 50%;
			}
		}
		@include media-breakpoint-only(lg) {
			grid-template-columns: 1fr 1fr 1fr 1fr;
			& > .card {
				flex-basis: percentage(1/3);
			}
		}
		@include media-breakpoint-up(xl) {
			grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
			& > .card {
				flex-basis: 25%;
			}
		}
	}
	
	// flex for IE 
	@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
		display: flex !important;
		flex-wrap: wrap;
	
	}

}

/*
Mixin for creating grid rows of cards
$numCards: number of cards per row
$gap( optional ) - gap between cards (used for border calculations when gap == 0), default: $card-deck-margin
*/
@mixin cardRow( $numCards, $gap: $card-deck-margin ) {
	--cards-per-row: #{$numCards};
	gap: $gap;
	// set correct borders above first row and before first row if there is zero gap to avoid double borders
	@if $gap==0 {
		.card:nth-child( #{$numCards}n+1 ) {
			// the first card in a row
			border-left: $card-border-style;
		}
		@for $i from 1 through $numCards {
			// cards in the first row
			.card:nth-child(#{$i}) {
				border-top: $card-border-style;
			}
		}
	}
	// if there is only 1 card per row, get rid of side borders
	@if $numCards==1 {
		.card {
			border-left: none;
			border-right: none;
		}
	}
}

// Card sizing system.
*:has( > .card-deck){
	// specify parent of .card-deck as css container
	container-name: cards-container;
	container-type: inline-size;
	.card-deck {
		display: grid;
		margin-bottom: $grid-gutter-width;

		// Card sizing depending on width of container

		// Default - 4 cards / row
		@container cards-container ( width > 960px ) {
			@include cardRow( 4 );
		}
		@container cards-container ( 600px < width <= 960px ) {
			@include cardRow( 3 );
		}
		@container cards-container ( 400px < width <= 600px ) {
			@include cardRow( 2, $card-deck-margin-sm );
		}
		@container cards-container ( width <= 400px ) {
			@include cardRow( 1, $card-deck-margin-sm );
		}

		// 6 cards per row
		&.card-deck--sized-6 {
			@container cards-container ( width > 990px ) {
				@include cardRow( 6 );
			}
			@container cards-container ( 720px < width <= 990px ) {
				@include cardRow( 4 );
			}
			@container cards-container ( 550px < width <= 720px ) {
				@include cardRow( 3 );
			}
			@container cards-container ( 350px < width <= 550px ) {
				@include cardRow( 2, $card-deck-margin-sm );
			}
			@container cards-container ( width <= 350px ) {
				@include cardRow( 1, $card-deck-margin-sm );
			}
		}

		grid-template-columns: repeat( var( --cards-per-row ) , 1fr);

		@include media-breakpoint-down(xs) {
			margin-left: 0 - divide( $grid-gutter-width, 2 );
			margin-right: 0 - divide( $grid-gutter-width, 2 );
		}

		.card {
			max-width: 100%;
			margin: 0;
		}
	}

	.card-deck--micro {
		display: flex;
		flex-wrap: wrap;
		.card { 
			flex-basis: 100px;
			width: 100px;
			height: 100px;
			flex-grow: 0;
		}
	}

}

.card-deck--hiddenmargin {
	margin-left: 0 - $grid-gutter-width/2;
	margin-right: 0 - $grid-gutter-width/2;
}


.section--list-products, .card-grid {
	margin-bottom: $grid-gutter-width;
	//border: 1px solid red;
	.pagination-container {
		margin-top: $grid-gutter-width;
	}
}

.section--child-pages {
	margin-top: $grid-gutter-width;
	.card-deck {
		margin-top: $grid-gutter-width;
		.card {
			background-color: $gray-100;
			&:hover {
				background-color: $gray-200;
			}
		}
	}
}